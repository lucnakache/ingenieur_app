{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output, session) {\n\n  \n  # Mise à jour du champ des possibles de modalite\n  observeEvent(input$o1_variable,{\n    a = config_modalite[[input$o1_variable]]\n    updateSelectInput(session,\n                      \"o1_modalite\",\n                      choices = a,\n                      selected = a[1:3])\n  })\n  \n  \n  \n  # Définition de la value box annee\n  output$vb_annee <- renderValueBox({\n    vals <- input$o1_year\n    valueBox(\n      value = vals,\n      subtitle = \"Année\",\n      icon = icon(\"hourglass\",lib = \"glyphicon\"),color=\"navy\"\n    )\n  })\n  \n  # Définition de la value box nb eleves\n  output$vb_nb_eleve <- renderValueBox({\n    vals <- config_taille_promo_df[config_taille_promo_df$year==input$o1_year,\"taille\"]\n    valueBox(\n      value = vals,\n      subtitle = \"Nombre d'Elèves\",\n      icon = icon(\"hourglass\",lib = \"glyphicon\"),color=\"navy\"\n    )\n  })\n  \n  \n  # Définition de la value box nb pays\n  output$vb_nb_pays <- renderValueBox({\n    vals <- config_taille_pays[config_taille_promo_df$year==input$o1_year]\n    valueBox(\n      value = vals,\n      subtitle = \"Nombre de pays\",\n      icon = icon(\"hourglass\",lib = \"glyphicon\"),color=\"navy\"\n    )\n  })\n  \n  \n  \n  \n  # Création des couleurs\n  ma_palette <- reactive({\n    pal = colorFactor(palette = input$o1_palette,domain = NULL)\n    res = pal(x = seq(1,length(input$o1_modalite)))\n    return(res)\n  })\n  \n  # Création de la carte\n  \n  observeEvent(input$o1_button_run_map,{\n    output$map <- renderLeaflet({\n      basemap %>%\n        addMinicharts(lng = france_region_polygone@data$long,\n                      lat = france_region_polygone@data$lat,\n                      chartdata = france_region_polygone@data[,input$o1_modalite],\n                      type = \"pie\",\n                      colorPalette =ma_palette(),\n                      width = log(as.numeric(apply(france_region_polygone@data[,c(\"fdomaine_mecanique\",\n                                                                                  \"fdomaine_ponts_chaussee\",\n                                                                                  \"fdomaine_travaux_public\" )],1,sum))) * input$o1_zoom,\n                      height = log(as.numeric(apply(france_region_polygone@data[,c(\"fdomaine_mecanique\",\n                                                                                   \"fdomaine_ponts_chaussee\",\n                                                                                   \"fdomaine_travaux_public\" )],1,sum))) * input$o1_zoom,\n                      maxValues = NULL,\n                      layerId = paste0(\"l\",seq(1,nrow(france_region_polygone@data))))\n      \n    })\n  })\n  \n  # \n  # output$map <- renderLeaflet({\n  #   basemap %>%\n  #     addMinicharts(lng = france_region_polygone@data$long,\n  #                   lat = france_region_polygone@data$lat,\n  #                   chartdata = france_region_polygone@data[,input$o1_modalite],\n  #                   type = \"pie\",\n  #                   colorPalette =ma_palette(),\n  #                   width = log(as.numeric(apply(france_region_polygone@data[,c(\"fdomaine_mecanique\",\n  #                                                                               \"fdomaine_ponts_chaussee\",\n  #                                                                               \"fdomaine_travaux_public\" )],1,sum))) * input$o1_zoom,\n  #                   height = log(as.numeric(apply(france_region_polygone@data[,c(\"fdomaine_mecanique\",\n  #                                                                                \"fdomaine_ponts_chaussee\",\n  #                                                                                \"fdomaine_travaux_public\" )],1,sum))) * input$o1_zoom,\n  #                   maxValues = NULL,\n  #                   layerId = paste0(\"l\",seq(1,nrow(france_region_polygone@data))))\n  # \n  # })\n  \n  \n  reactive_promotion_df<- reactive({\n    res = bigds[bigds$annee == as.numeric(input$o1_year),]\n    res\n  })\n  \n\n  \n\n  output$checktest <- renderPrint({ forhc() })\n  \n  \n\n  observeEvent(input$o1_year,{\n\n    leafletProxy(\"map\", session) %>%\n      updateMinicharts(layerId = paste0(\"l\",seq(1,nrow(reactive_promotion_df()))),\n                       chartdata = reactive_promotion_df()[,input$o1_modalite],\n                       colorPalette =ma_palette(),\n                       showLabels = input$o1_show_val\n                       )\n\n  })\n  \n  # Rezactive value qui compute le texte de la popup\n  forpopup <- reactive({\n    popup_data = reactive_promotion_df()[reactive_promotion_df()$OBJECTID==input$map_shape_click$id,input$o1_modalite]\n    REGION_NAME = reactive_promotion_df()$NAME_1[reactive_promotion_df()$OBJECTID==input$map_shape_click$id]\n    popup_text = df_to_html(popup_data,\n                            ma_palette(),\n                            REGION_NAME,\n                            input$o1_year)\n    list(popup_data,REGION_NAME,ma_palette(),popup_text)\n  })\n  \n  # Reactive value qui compute la series qu on vaplotter dans hc\n  forhc <-reactive({\n    temp_ds = bigds[bigds$OBJECTID == input$map_shape_click$id, input$o1_modalite]\n    series = fun_compute_serie_for_plot(temp_ds,ma_palette())\n    series\n  })\n  \n  \n  observeEvent(input$map_shape_click,{\n    \n    click_action = input$map_shape_click\n    popup_data = reactive_promotion_df()[reactive_promotion_df()$OBJECTID==input$map_shape_click$id & reactive_promotion_df()$annee==input$o1_year,input$o1_modalite]\n    popup_text = forpopup()[[4]]\n    \n    leafletProxy(\"map\", session) %>%\n      updateMinicharts(layerId = paste0(\"l\",seq(1,nrow(reactive_promotion_df()))),\n                       chartdata = reactive_promotion_df()[,input$o1_modalite],\n                       type = \"pie\",\n                       colorPalette =ma_palette(),\n                       showLabels = input$o1_show_val) %>%\n      addPopups(lng = click_action$lng,\n                lat = click_action$lat,\n                popup = popup_text,\n                layerId = \"popupid\",\n                options = popupOptions(closeOnClick = TRUE))\n    \n  })\n  \n  \n  \n  output$o1_plot_ts=renderHighchart({\n    highchart() %>%\n      hc_add_series_list(forhc())%>%\n      hc_xAxis(categories=config_year_vector) %>%\n      hc_chart(backgroundColor = \"#b2b2b2\") \n    })\n\n  \n  \n  \n  # reactive value qui construitl a table qu on affichera\n  fordico <-reactive({\n    promo = input$o2_annee_promotion\n    rec = input$o2_recompense\n    dom = input$o2_domaine\n    \n    if (is.null(promo)) {promo = ingenieur_df$year}\n    if (is.null(rec)) {rec = ingenieur_df$recompense}\n    if (is.null(dom)) {dom = ingenieur_df$domaine}\n    \n    keep_col = c(\"id\",\"year\",\"domaine\",\"recompense\",\"biographie\",\"NAME_0\",\"NAME_1\")\n    temp_ds = ingenieur_df[ingenieur_df$year %in% promo & ingenieur_df$recompense %in% rec & ingenieur_df$domaine %in% dom,keep_col]\n\n   \n  })\n  \n  \n\n  \n  \n  # afficge la table\n  output$dico_inge <- renderDataTable(fordico())\n  \n  \n  # titre de plot ts de longlet 1\n  output$o1_title_plot_ts <- renderText({\n    paste(forpopup()[[2]])\n  })\n\n\n  \n\n  \n  \n  \n  \n  \n  \n  # variable debug\n  output$checktest_o2 <- renderPrint({ forhc2() })\n  \n  # reactive value qui compute les series pour le graph\n  # de l'onglet 3\n  forhc2 <-reactive({\n    series = fun_compute_serie_for_plot_2(ma_palette(),\n                                          input$o1_modalite,\n                                          input$o1_variable)\n    series\n  })\n  \n  # Graphique de l'oonglet 3\n  output$o3_plot_ts=renderHighchart({\n    highchart() %>%\n      hc_add_series_list(forhc2())%>%\n      hc_xAxis(categories=config_year_vector) %>%\n      hc_chart(backgroundColor = \"#b2b2b2\") \n  })\n  \n  \n  # titre de plot ts de longlet 3\n  output$o3_title_plot_ts <- renderText({\n    paste(input$o1_variable)\n  })\n  \n  \n  \n  \n})",
    "created" : 1528541914921.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "98115722",
    "id" : "3338FAE5",
    "lastKnownWriteTime" : 1528617717,
    "last_content_update" : 1528617717216,
    "path" : "C:/Users/Bar Yokhai/Desktop/projets/Blog/luc_ingenieur_app/dashboardapp/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}